package com.google.common.net;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link InternetDomainName} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractInternetDomainNameAssert<S extends AbstractInternetDomainNameAssert<S, A>, A extends InternetDomainName> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractInternetDomainNameAssert}</code> to make assertions on actual InternetDomainName.
   * @param actual the InternetDomainName we want to make assertions on.
   */
  protected AbstractInternetDomainNameAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual InternetDomainName has parent.
   * @return this assertion object.
   * @throws AssertionError - if the actual InternetDomainName does not have parent.
   */
  public S hasParent() {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.hasParent()) {
      failWithMessage("\nExpecting that actual InternetDomainName has parent but does not have.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName does not have parent.
   * @return this assertion object.
   * @throws AssertionError - if the actual InternetDomainName has parent.
   */
  public S doesNotHaveParent() {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.hasParent()) {
      failWithMessage("\nExpecting that actual InternetDomainName does not have parent but has.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName has public suffix.
   * @return this assertion object.
   * @throws AssertionError - if the actual InternetDomainName does not have public suffix.
   */
  public S hasPublicSuffix() {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.hasPublicSuffix()) {
      failWithMessage("\nExpecting that actual InternetDomainName has public suffix but does not have.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName does not have public suffix.
   * @return this assertion object.
   * @throws AssertionError - if the actual InternetDomainName has public suffix.
   */
  public S doesNotHavePublicSuffix() {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.hasPublicSuffix()) {
      failWithMessage("\nExpecting that actual InternetDomainName does not have public suffix but has.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName is public suffix.
   * @return this assertion object.
   * @throws AssertionError - if the actual InternetDomainName is not public suffix.
   */
  public S isPublicSuffix() {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isPublicSuffix()) {
      failWithMessage("\nExpecting that actual InternetDomainName is public suffix but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName is not public suffix.
   * @return this assertion object.
   * @throws AssertionError - if the actual InternetDomainName is public suffix.
   */
  public S isNotPublicSuffix() {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isPublicSuffix()) {
      failWithMessage("\nExpecting that actual InternetDomainName is not public suffix but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName is top private domain.
   * @return this assertion object.
   * @throws AssertionError - if the actual InternetDomainName is not top private domain.
   */
  public S isTopPrivateDomain() {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isTopPrivateDomain()) {
      failWithMessage("\nExpecting that actual InternetDomainName is top private domain but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName is not top private domain.
   * @return this assertion object.
   * @throws AssertionError - if the actual InternetDomainName is top private domain.
   */
  public S isNotTopPrivateDomain() {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isTopPrivateDomain()) {
      failWithMessage("\nExpecting that actual InternetDomainName is not top private domain but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName is under public suffix.
   * @return this assertion object.
   * @throws AssertionError - if the actual InternetDomainName is not under public suffix.
   */
  public S isUnderPublicSuffix() {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isUnderPublicSuffix()) {
      failWithMessage("\nExpecting that actual InternetDomainName is under public suffix but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName is not under public suffix.
   * @return this assertion object.
   * @throws AssertionError - if the actual InternetDomainName is under public suffix.
   */
  public S isNotUnderPublicSuffix() {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isUnderPublicSuffix()) {
      failWithMessage("\nExpecting that actual InternetDomainName is not under public suffix but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName's name is equal to the given one.
   * @param name the given name to compare the actual InternetDomainName's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InternetDomainName's name is not equal to the given one.
   */
  public S hasName(String name) {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("name", String.class, actual);
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName's parts contains the given String elements.
   * @param parts the given elements that should be contained in actual InternetDomainName's parts.
   * @return this assertion object.
   * @throws AssertionError if the actual InternetDomainName's parts does not contain all given String elements.
   */
  public S hasParts(String... parts) {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (parts == null) failWithMessage("Expecting parts parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("parts", com.google.common.collect.ImmutableList.class, actual), parts);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName's parts contains the given String elements in Collection.
   * @param parts the given elements that should be contained in actual InternetDomainName's parts.
   * @return this assertion object.
   * @throws AssertionError if the actual InternetDomainName's parts does not contain all given String elements.
   */
  public S hasParts(java.util.Collection<? extends String> parts) {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (parts == null) {
      failWithMessage("Expecting parts parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("parts", com.google.common.collect.ImmutableList.class, actual), parts.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName's parts contains <b>only</b> the given String elements and nothing else in whatever order.
   * @param parts the given elements that should be contained in actual InternetDomainName's parts.
   * @return this assertion object.
   * @throws AssertionError if the actual InternetDomainName's parts does not contain all given String elements.
   */
  public S hasOnlyParts(String... parts) {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (parts == null) failWithMessage("Expecting parts parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("parts", com.google.common.collect.ImmutableList.class, actual), parts);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName's parts contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
   * @param parts the given elements that should be contained in actual InternetDomainName's parts.
   * @return this assertion object.
   * @throws AssertionError if the actual InternetDomainName's parts does not contain all given String elements.
   */
  public S hasOnlyParts(java.util.Collection<? extends String> parts) {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (parts == null) {
      failWithMessage("Expecting parts parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("parts", com.google.common.collect.ImmutableList.class, actual), parts.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName's parts does not contain the given String elements.
   *
   * @param parts the given elements that should not be in actual InternetDomainName's parts.
   * @return this assertion object.
   * @throws AssertionError if the actual InternetDomainName's parts contains any given String elements.
   */
  public S doesNotHaveParts(String... parts) {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (parts == null) failWithMessage("Expecting parts parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("parts", com.google.common.collect.ImmutableList.class, actual), parts);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName's parts does not contain the given String elements in Collection.
   *
   * @param parts the given elements that should not be in actual InternetDomainName's parts.
   * @return this assertion object.
   * @throws AssertionError if the actual InternetDomainName's parts contains any given String elements.
   */
  public S doesNotHaveParts(java.util.Collection<? extends String> parts) {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (parts == null) {
      failWithMessage("Expecting parts parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("parts", com.google.common.collect.ImmutableList.class, actual), parts.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InternetDomainName has no parts.
   * @return this assertion object.
   * @throws AssertionError if the actual InternetDomainName's parts is not empty.
   */
  public S hasNoParts() {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have parts but had :\n  <%s>";

    // check
    if (org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("parts", com.google.common.collect.ImmutableList.class, actual).iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("parts", com.google.common.collect.ImmutableList.class, actual));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual InternetDomainName's publicSuffixIndex is equal to the given one.
   * @param publicSuffixIndex the given publicSuffixIndex to compare the actual InternetDomainName's publicSuffixIndex to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InternetDomainName's publicSuffixIndex is not equal to the given one.
   */
  public S hasPublicSuffixIndex(int publicSuffixIndex) {
    // check that actual InternetDomainName we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting publicSuffixIndex of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualPublicSuffixIndex = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("publicSuffixIndex", int.class, actual);
    if (actualPublicSuffixIndex != publicSuffixIndex) {
      failWithMessage(assertjErrorMessage, actual, publicSuffixIndex, actualPublicSuffixIndex);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
