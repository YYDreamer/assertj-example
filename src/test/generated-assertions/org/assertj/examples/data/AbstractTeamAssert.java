package org.assertj.examples.data;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * Abstract base class for {@link Team} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractTeamAssert<S extends AbstractTeamAssert<S, A>, A extends Team> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractTeamAssert}</code> to make assertions on actual Team.
   * @param actual the Team we want to make assertions on.
   */
  protected AbstractTeamAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Team's players contains the given BasketBallPlayer elements.
   * @param players the given elements that should be contained in actual Team's players.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's players does not contain all given BasketBallPlayer elements.
   */
  public S hasPlayers(BasketBallPlayer... players) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that given BasketBallPlayer varargs is not null.
    if (players == null) failWithMessage("Expecting players parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPlayers(), players);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Team's players contains the given BasketBallPlayer elements in Collection.
   * @param players the given elements that should be contained in actual Team's players.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's players does not contain all given BasketBallPlayer elements.
   */
  public S hasPlayers(java.util.Collection<? extends BasketBallPlayer> players) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that given BasketBallPlayer collection is not null.
    if (players == null) {
      failWithMessage("Expecting players parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPlayers(), players.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Team's players contains <b>only</b> the given BasketBallPlayer elements and nothing else in whatever order.
   * @param players the given elements that should be contained in actual Team's players.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's players does not contain all given BasketBallPlayer elements.
   */
  public S hasOnlyPlayers(BasketBallPlayer... players) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that given BasketBallPlayer varargs is not null.
    if (players == null) failWithMessage("Expecting players parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPlayers(), players);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Team's players contains <b>only</b> the given BasketBallPlayer elements in Collection and nothing else in whatever order.
   * @param players the given elements that should be contained in actual Team's players.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's players does not contain all given BasketBallPlayer elements.
   */
  public S hasOnlyPlayers(java.util.Collection<? extends BasketBallPlayer> players) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that given BasketBallPlayer collection is not null.
    if (players == null) {
      failWithMessage("Expecting players parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPlayers(), players.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Team's players does not contain the given BasketBallPlayer elements.
   *
   * @param players the given elements that should not be in actual Team's players.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's players contains any given BasketBallPlayer elements.
   */
  public S doesNotHavePlayers(BasketBallPlayer... players) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that given BasketBallPlayer varargs is not null.
    if (players == null) failWithMessage("Expecting players parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPlayers(), players);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Team's players does not contain the given BasketBallPlayer elements in Collection.
   *
   * @param players the given elements that should not be in actual Team's players.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's players contains any given BasketBallPlayer elements.
   */
  public S doesNotHavePlayers(java.util.Collection<? extends BasketBallPlayer> players) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that given BasketBallPlayer collection is not null.
    if (players == null) {
      failWithMessage("Expecting players parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPlayers(), players.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Team has no players.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's players is not empty.
   */
  public S hasNoPlayers() {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have players but had :\n  <%s>";

    // check
    if (actual.getPlayers().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPlayers());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Team is playoff team.
   * @return this assertion object.
   * @throws AssertionError - if the actual Team is not playoff team.
   */
  public S isPlayoffTeam() {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isPlayoffTeam) {
      failWithMessage("\nExpecting that actual Team is playoff team but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Team is not playoff team.
   * @return this assertion object.
   * @throws AssertionError - if the actual Team is playoff team.
   */
  public S isNotPlayoffTeam() {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isPlayoffTeam) {
      failWithMessage("\nExpecting that actual Team is not playoff team but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

}
