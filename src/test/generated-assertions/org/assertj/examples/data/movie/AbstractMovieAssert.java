package org.assertj.examples.data.movie;

import org.assertj.core.util.Objects;
import org.assertj.examples.data.AbstractArtWorkAssert;

/**
 * Abstract base class for {@link Movie} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractMovieAssert<S extends AbstractMovieAssert<S, A>, A extends Movie> extends AbstractArtWorkAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractMovieAssert}</code> to make assertions on actual Movie.
   * @param actual the Movie we want to make assertions on.
   */
  protected AbstractMovieAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Movie can be given.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie cannot be given.
   */
  public S canBeGiven() {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.canBeGiven()) {
      failWithMessage("\nExpecting that actual Movie can be given but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie cannot be given.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie can be given.
   */
  public S cannotBeGiven() {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.canBeGiven()) {
      failWithMessage("\nExpecting that actual Movie cannot be given but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie's releaseDate is equal to the given one.
   * @param releaseDate the given releaseDate to compare the actual Movie's releaseDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie's releaseDate is not equal to the given one.
   */
  public S hasReleaseDate(java.util.Date releaseDate) {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting releaseDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Date actualReleaseDate = actual.getReleaseDate();
    if (!Objects.areEqual(actualReleaseDate, releaseDate)) {
      failWithMessage(assertjErrorMessage, actual, releaseDate, actualReleaseDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie's title is equal to the given one.
   * @param title the given title to compare the actual Movie's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie's title is not equal to the given one.
   */
  public S hasTitle(String title) {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTitle = actual.getTitle();
    if (!Objects.areEqual(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie can be copied.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie cannot be copied.
   */
  public S canBeCopied() {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.canBeCopied) {
      failWithMessage("\nExpecting that actual Movie can be copied but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie cannot be copied.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie can be copied.
   */
  public S cannotBeCopied() {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.canBeCopied) {
      failWithMessage("\nExpecting that actual Movie cannot be copied but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie's duration is equal to the given one.
   * @param duration the given duration to compare the actual Movie's duration to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie's duration is not equal to the given one.
   */
  public S hasDuration(String duration) {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting duration of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDuration = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("duration", String.class, actual);
    if (!Objects.areEqual(actualDuration, duration)) {
      failWithMessage(assertjErrorMessage, actual, duration, actualDuration);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie is xrated.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie is not xrated.
   */
  public S isXrated() {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.xrated) {
      failWithMessage("\nExpecting that actual Movie is xrated but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie is not xrated.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie is xrated.
   */
  public S isNotXrated() {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.xrated) {
      failWithMessage("\nExpecting that actual Movie is not xrated but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

}
