package org.assertj.examples.data.bug27;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link MyModelClass} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractMyModelClassAssert<S extends AbstractMyModelClassAssert<S, A>, A extends MyModelClass> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractMyModelClassAssert}</code> to make assertions on actual MyModelClass.
   * @param actual the MyModelClass we want to make assertions on.
   */
  protected AbstractMyModelClassAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual MyModelClass's iterator is equal to the given one.
   * @param iterator the given iterator to compare the actual MyModelClass's iterator to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MyModelClass's iterator is not equal to the given one.
   */
  public S hasIterator(MyIteratorWrapper iterator) {
    // check that actual MyModelClass we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting iterator of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    MyIteratorWrapper actualIterator = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("iterator", MyIteratorWrapper.class, actual);
    if (!Objects.areEqual(actualIterator, iterator)) {
      failWithMessage(assertjErrorMessage, actual, iterator, actualIterator);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
